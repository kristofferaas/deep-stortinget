{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { fileURLToPath, pathToFileURL } from 'node:url'\n\nimport { logDiff } from '@tanstack/router-utils'\nimport { compileDirectives } from './compilers'\nimport type {\n  CompileDirectivesOpts,\n  DirectiveFn,\n  GenerateFunctionIdFn,\n} from './compilers'\nimport type { Plugin } from 'vite'\n\nconst debug =\n  process.env.TSR_VITE_DEBUG &&\n  ['true', 'directives-functions-plugin'].includes(process.env.TSR_VITE_DEBUG)\n\nexport type {\n  DirectiveFn,\n  CompileDirectivesOpts,\n  ReplacerFn,\n  GenerateFunctionIdFn,\n} from './compilers'\n\nexport type DirectiveFunctionsViteEnvOptions = Pick<\n  CompileDirectivesOpts,\n  'getRuntimeCode' | 'replacer'\n> & {\n  envLabel: string\n}\n\nexport type DirectiveFunctionsViteOptions = Pick<\n  CompileDirectivesOpts,\n  'directive' | 'directiveLabel'\n> &\n  DirectiveFunctionsViteEnvOptions & {\n    onDirectiveFnsById?: (directiveFnsById: Record<string, DirectiveFn>) => void\n    generateFunctionId: GenerateFunctionIdFn\n  }\n\nconst createDirectiveRx = (directive: string) =>\n  new RegExp(`\"${directive}\"|'${directive}'`, 'gm')\n\nexport type DirectiveFunctionsVitePluginEnvOptions = Pick<\n  CompileDirectivesOpts,\n  'directive' | 'directiveLabel'\n> & {\n  environments: {\n    client: DirectiveFunctionsViteEnvOptions & { envName?: string }\n    server: DirectiveFunctionsViteEnvOptions & { envName?: string }\n  }\n  onDirectiveFnsById?: (directiveFnsById: Record<string, DirectiveFn>) => void\n  generateFunctionId: GenerateFunctionIdFn\n}\n\nexport function TanStackDirectiveFunctionsPluginEnv(\n  opts: DirectiveFunctionsVitePluginEnvOptions,\n): Plugin {\n  opts = {\n    ...opts,\n    environments: {\n      client: {\n        envName: 'client',\n        ...opts.environments.client,\n      },\n      server: {\n        envName: 'server',\n        ...opts.environments.server,\n      },\n    },\n  }\n\n  let root: string = process.cwd()\n\n  const directiveRx = createDirectiveRx(opts.directive)\n\n  return {\n    name: 'tanstack-start-directive-vite-plugin',\n    enforce: 'pre',\n    buildStart() {\n      root = this.environment.config.root\n    },\n    applyToEnvironment(env) {\n      return [\n        opts.environments.client.envName,\n        opts.environments.server.envName,\n      ].includes(env.name)\n    },\n    transform: {\n      filter: {\n        code: directiveRx,\n      },\n      handler(code, id) {\n        const envOptions = [\n          opts.environments.client,\n          opts.environments.server,\n        ].find((e) => e.envName === this.environment.name)\n\n        if (!envOptions) {\n          throw new Error(`Environment ${this.environment.name} not found`)\n        }\n\n        return transformCode({\n          ...opts,\n          ...envOptions,\n          code,\n          id,\n          root,\n        })\n      },\n    },\n  }\n}\n\nfunction transformCode({\n  code,\n  id,\n  envLabel,\n  directive,\n  directiveLabel,\n  getRuntimeCode,\n  generateFunctionId,\n  replacer,\n  onDirectiveFnsById,\n  root,\n}: DirectiveFunctionsViteOptions & {\n  code: string\n  id: string\n  root: string\n}) {\n  const url = pathToFileURL(id)\n  url.searchParams.delete('v')\n  id = fileURLToPath(url).replace(/\\\\/g, '/')\n\n  if (debug) console.info(`${envLabel}: Compiling Directives: `, id)\n\n  const { compiledResult, directiveFnsById, isDirectiveSplitParam } =\n    compileDirectives({\n      directive,\n      directiveLabel,\n      getRuntimeCode,\n      generateFunctionId,\n      replacer,\n      code,\n      root,\n      filename: id,\n    })\n  // when we process a file with a directive split param, we have already encountered the directives in that file\n  // (otherwise we wouldn't have gotten here)\n  if (!isDirectiveSplitParam) {\n    onDirectiveFnsById?.(directiveFnsById)\n  }\n\n  if (debug) {\n    logDiff(code, compiledResult.code)\n    console.log('Output:\\n', compiledResult.code + '\\n\\n')\n  }\n\n  return compiledResult\n}\n"],"names":[],"mappings":";;;AAWA,MAAM,QACJ,QAAQ,IAAI,kBACZ,CAAC,QAAQ,6BAA6B,EAAE,SAAS,QAAQ,IAAI,cAAc;AAyB7E,MAAM,oBAAoB,CAAC,cACzB,IAAI,OAAO,IAAI,SAAS,MAAM,SAAS,KAAK,IAAI;AAc3C,SAAS,oCACd,MACQ;AACR,SAAO;AAAA,IACL,GAAG;AAAA,IACH,cAAc;AAAA,MACZ,QAAQ;AAAA,QACN,SAAS;AAAA,QACT,GAAG,KAAK,aAAa;AAAA,MAAA;AAAA,MAEvB,QAAQ;AAAA,QACN,SAAS;AAAA,QACT,GAAG,KAAK,aAAa;AAAA,MAAA;AAAA,IACvB;AAAA,EACF;AAGF,MAAI,OAAe,QAAQ,IAAA;AAE3B,QAAM,cAAc,kBAAkB,KAAK,SAAS;AAEpD,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AACX,aAAO,KAAK,YAAY,OAAO;AAAA,IACjC;AAAA,IACA,mBAAmB,KAAK;AACtB,aAAO;AAAA,QACL,KAAK,aAAa,OAAO;AAAA,QACzB,KAAK,aAAa,OAAO;AAAA,MAAA,EACzB,SAAS,IAAI,IAAI;AAAA,IACrB;AAAA,IACA,WAAW;AAAA,MACT,QAAQ;AAAA,QACN,MAAM;AAAA,MAAA;AAAA,MAER,QAAQ,MAAM,IAAI;AAChB,cAAM,aAAa;AAAA,UACjB,KAAK,aAAa;AAAA,UAClB,KAAK,aAAa;AAAA,QAAA,EAClB,KAAK,CAAC,MAAM,EAAE,YAAY,KAAK,YAAY,IAAI;AAEjD,YAAI,CAAC,YAAY;AACf,gBAAM,IAAI,MAAM,eAAe,KAAK,YAAY,IAAI,YAAY;AAAA,QAClE;AAEA,eAAO,cAAc;AAAA,UACnB,GAAG;AAAA,UACH,GAAG;AAAA,UACH;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AAAA,MACH;AAAA,IAAA;AAAA,EACF;AAEJ;AAEA,SAAS,cAAc;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,QAAM,MAAM,cAAc,EAAE;AAC5B,MAAI,aAAa,OAAO,GAAG;AAC3B,OAAK,cAAc,GAAG,EAAE,QAAQ,OAAO,GAAG;AAE1C,MAAI,MAAO,SAAQ,KAAK,GAAG,QAAQ,4BAA4B,EAAE;AAEjE,QAAM,EAAE,gBAAgB,kBAAkB,sBAAA,IACxC,kBAAkB;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,EAAA,CACX;AAGH,MAAI,CAAC,uBAAuB;AAC1B,yBAAqB,gBAAgB;AAAA,EACvC;AAEA,MAAI,OAAO;AACT,YAAQ,MAAM,eAAe,IAAI;AACjC,YAAQ,IAAI,aAAa,eAAe,OAAO,MAAM;AAAA,EACvD;AAEA,SAAO;AACT;"}