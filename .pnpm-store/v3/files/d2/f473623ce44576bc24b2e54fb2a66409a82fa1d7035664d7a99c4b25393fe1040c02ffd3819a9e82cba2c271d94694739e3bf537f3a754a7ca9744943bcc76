{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["/// <reference types=\"vite/client\" />\nimport crypto from 'node:crypto'\nimport { TanStackDirectiveFunctionsPluginEnv } from '@tanstack/directive-functions-plugin'\nimport type { DevEnvironment, Plugin } from 'vite'\nimport type {\n  DirectiveFn,\n  GenerateFunctionIdFn,\n  ReplacerFn,\n} from '@tanstack/directive-functions-plugin'\n\nexport type GenerateFunctionIdFnOptional = (\n  opts: Omit<Parameters<GenerateFunctionIdFn>[0], 'extractedFilename'>,\n) => string | undefined\n\nexport type TanStackServerFnPluginOpts = {\n  /**\n   * The virtual import ID that will be used to import the server function manifest.\n   * This virtual import ID will be used in the server build to import the manifest\n   * and its modules.\n   */\n  manifestVirtualImportId: string\n  generateFunctionId?: GenerateFunctionIdFnOptional\n  client: ServerFnPluginEnvOpts\n  server: ServerFnPluginEnvOpts\n}\n\nexport type ServerFnPluginEnvOpts = {\n  getRuntimeCode: () => string\n  replacer: ReplacerFn\n  envName?: string\n}\n\nconst debug =\n  process.env.TSR_VITE_DEBUG &&\n  ['true', 'server-functions-plugin'].includes(process.env.TSR_VITE_DEBUG)\n\nexport function TanStackServerFnPlugin(\n  _opts: TanStackServerFnPluginOpts,\n): Array<Plugin> {\n  const opts = {\n    ..._opts,\n    client: {\n      ..._opts.client,\n      envName: _opts.client.envName || 'client',\n    },\n    server: {\n      ..._opts.server,\n      envName: _opts.server.envName || 'server',\n    },\n  }\n\n  const directiveFnsById: Record<string, DirectiveFn> = {}\n  let serverDevEnv: DevEnvironment | undefined\n\n  const onDirectiveFnsById = (d: Record<string, DirectiveFn>) => {\n    if (serverDevEnv) {\n      return\n    }\n    if (debug) {\n      console.info(`onDirectiveFnsById received: `, d)\n    }\n    Object.assign(directiveFnsById, d)\n    if (debug) {\n      console.info(`directiveFnsById after update: `, directiveFnsById)\n    }\n  }\n\n  const entryIdToFunctionId = new Map<string, string>()\n  const functionIds = new Set<string>()\n\n  function withTrailingSlash(path: string): string {\n    if (path[path.length - 1] !== '/') {\n      return `${path}/`\n    }\n    return path\n  }\n\n  const generateFunctionId: GenerateFunctionIdFn = ({\n    extractedFilename,\n    functionName,\n    filename,\n  }) => {\n    if (serverDevEnv) {\n      const root = serverDevEnv.config.root\n      const rootWithTrailingSlash = withTrailingSlash(root)\n      let file = extractedFilename\n      if (extractedFilename.startsWith(rootWithTrailingSlash)) {\n        file = extractedFilename.slice(rootWithTrailingSlash.length)\n      }\n      file = `/@id/${file}`\n\n      const serverFn: {\n        file: string\n        export: string\n      } = {\n        file,\n        export: functionName,\n      }\n      const base64 = Buffer.from(JSON.stringify(serverFn), 'utf8').toString(\n        'base64url',\n      )\n      return base64\n    }\n\n    // production build allows to override the function ID generation\n    const entryId = `${filename}--${functionName}`\n    let functionId = entryIdToFunctionId.get(entryId)\n    if (functionId === undefined) {\n      if (opts.generateFunctionId) {\n        functionId = opts.generateFunctionId({\n          functionName,\n          filename,\n        })\n      }\n      if (!functionId) {\n        functionId = crypto.createHash('sha256').update(entryId).digest('hex')\n      }\n      // Deduplicate in case the generated id conflicts with an existing id\n      if (functionIds.has(functionId)) {\n        let deduplicatedId\n        let iteration = 0\n        do {\n          deduplicatedId = `${functionId}_${++iteration}`\n        } while (functionIds.has(deduplicatedId))\n        functionId = deduplicatedId\n      }\n      entryIdToFunctionId.set(entryId, functionId)\n      functionIds.add(functionId)\n    }\n    return functionId\n  }\n  const directive = 'use server'\n  const directiveLabel = 'Server Function'\n\n  const resolvedManifestVirtualImportId = resolveViteId(\n    opts.manifestVirtualImportId,\n  )\n\n  return [\n    // The client plugin is used to compile the client directives\n    // and save them so we can create a manifest\n    TanStackDirectiveFunctionsPluginEnv({\n      directive,\n      directiveLabel,\n      onDirectiveFnsById,\n      generateFunctionId,\n      environments: {\n        client: {\n          envLabel: 'Client',\n          getRuntimeCode: opts.client.getRuntimeCode,\n          replacer: opts.client.replacer,\n          envName: opts.client.envName,\n        },\n        server: {\n          envLabel: 'Server',\n          getRuntimeCode: opts.server.getRuntimeCode,\n          replacer: opts.server.replacer,\n          envName: opts.server.envName,\n        },\n      },\n    }),\n    {\n      // On the server, we need to be able to read the server-function manifest from the client build.\n      // This is likely used in the handler for server functions, so we can find the server function\n      // by its ID, import it, and call it.\n      name: 'tanstack-start-server-fn-vite-plugin-manifest-server',\n      enforce: 'pre',\n      configureServer(viteDevServer) {\n        serverDevEnv = viteDevServer.environments[opts.server.envName]\n        if (!serverDevEnv) {\n          throw new Error(\n            `TanStackServerFnPluginEnv: environment \"${opts.server.envName}\" not found`,\n          )\n        }\n      },\n      resolveId: {\n        filter: { id: new RegExp(opts.manifestVirtualImportId) },\n        handler() {\n          return resolvedManifestVirtualImportId\n        },\n      },\n      load: {\n        filter: { id: new RegExp(resolvedManifestVirtualImportId) },\n        handler() {\n          if (this.environment.name !== opts.server.envName) {\n            return `export default {}`\n          }\n\n          if (this.environment.mode !== 'build') {\n            const mod = `\n            export async function getServerFnById(id) {\n              const decoded = Buffer.from(id, 'base64url').toString('utf8')\n              const devServerFn = JSON.parse(decoded)\n              const mod = await import(/* @vite-ignore */ devServerFn.file)\n              return mod[devServerFn.export]\n            }\n            `\n            return mod\n          }\n\n          const mod = `\n          const manifest = {${Object.entries(directiveFnsById)\n            .map(\n              ([id, fn]: any) =>\n                `'${id}': {\n                  functionName: '${fn.functionName}',\n                  importer: () => import(${JSON.stringify(fn.extractedFilename)})\n                }`,\n            )\n            .join(',')}}\n            export async function getServerFnById(id) {\n              const serverFnInfo = manifest[id]\n              if (!serverFnInfo) {\n                throw new Error('Server function info not found for ' + id)\n              }\n              const fnModule = await serverFnInfo.importer()\n\n              if (!fnModule) {\n                console.info('serverFnInfo', serverFnInfo)\n                throw new Error('Server function module not resolved for ' + id)\n              }\n\n              const action = fnModule[serverFnInfo.functionName]\n\n              if (!action) {\n                  console.info('serverFnInfo', serverFnInfo)\n                  console.info('fnModule', fnModule)\n\n                throw new Error(\n                  \\`Server function module export not resolved for serverFn ID: \\${id}\\`,\n                )\n              }\n              return action\n            }\n          `\n\n          return mod\n        },\n      },\n    },\n  ]\n}\n\nfunction resolveViteId(id: string) {\n  return `\\0${id}`\n}\n"],"names":["mod"],"mappings":"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"}